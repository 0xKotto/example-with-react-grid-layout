{"version":3,"sources":["components/common/appHeader/AppHeader.module.scss","pages/editor/Editor.module.scss","App.module.scss","components/common/widgets/SimpleLineChart.tsx","components/common/widgets/StackedAreaChart.tsx","components/common/widgets/MixedBarChart.tsx","components/common/widgets/StackedBarChart.tsx","components/common/widgets/SimpleScatterChart.tsx","components/common/widgetCard/WidgetCard.tsx","components/common/widgetGrid/WidgetGrid.tsx","pages/editor/Editor.tsx","pages/dashboard/Dashboard.tsx","components/common/appHeader/AppHeader.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx","components/common/widgetCard/WidgetCard.module.scss"],"names":["module","exports","data","name","uv","pv","amt","Example","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","activeDot","r","PureComponent","demoUrl","AreaChart","Area","stackId","fill","BarChart","Bar","x","y","z","ScatterChart","unit","cursor","Scatter","WidgetCard","deleteWidget","i","isEditorModeOn","displayedWidget","className","styles","WidgetCardInEditMode","header","headerInReadOnlyMode","title","onClick","size","body","ReactGridLayout","WidthProvider","RGL","WidgetGrid","layout","setLayout","cols","isDraggable","isResizable","onLayoutChange","map","item","Editor","numberOfEmptyPanelsInGrid","length","maxWidgetYPosition","Math","max","widgdet","maxHeightofHighestWidget","filter","widget","h","style","position","emptyPanelsgrid","Array","from","_","emptyPanel","widgetLayout","Dashboard","AppHeader","setIsEditorModeOn","addWidget","availableWidgetOptions","option","some","nav","display","alignItems","htmlFor","mb","id","isChecked","onChange","e","target","checked","editorModeSwitch","as","IconButton","icon","Add","variant","noMoreOptions","App","useState","currentLayout","theme","lastWidgetPosition","NUMBER_OF_COLUMNS","w","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e878d03c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppHeader_header__1J7Lq\",\"nav\":\"AppHeader_nav__28oMq\",\"noMoreOptions\":\"AppHeader_noMoreOptions__37Tl8\",\"editorModeSwitch\":\"AppHeader_editorModeSwitch__XDgl0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emptyPanelsgrid\":\"Editor_emptyPanelsgrid__3Mj3d\",\"emptyPanel\":\"Editor_emptyPanel__vi9_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"body\":\"App_body__2a4FT\"};","import React, { PureComponent } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst data = [\n  {\n    name: \"Page A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: \"Page B\",\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: \"Page C\",\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: \"Page D\",\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: \"Page E\",\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: \"Page F\",\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: \"Page G\",\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport default class Example extends PureComponent {\n  static demoUrl = \"https://codesandbox.io/s/simple-line-chart-kec3v\";\n\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"pv\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n          <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n        </LineChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst data = [\n  {\n    name: \"Page A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: \"Page B\",\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: \"Page C\",\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: \"Page D\",\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: \"Page E\",\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: \"Page F\",\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: \"Page G\",\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport default class Example extends PureComponent {\n  static demoUrl = \"https://codesandbox.io/s/stacked-area-chart-ix341\";\n\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          width={500}\n          height={400}\n          data={data}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Area\n            type=\"monotone\"\n            dataKey=\"uv\"\n            stackId=\"1\"\n            stroke=\"#8884d8\"\n            fill=\"#8884d8\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"pv\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"amt\"\n            stackId=\"1\"\n            stroke=\"#ffc658\"\n            fill=\"#ffc658\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst data = [\n  {\n    name: \"Page A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: \"Page B\",\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: \"Page C\",\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: \"Page D\",\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: \"Page E\",\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: \"Page F\",\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: \"Page G\",\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport default class Example extends PureComponent {\n  static demoUrl = \"https://codesandbox.io/s/mixed-bar-chart-q4hgc\";\n\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"pv\" stackId=\"a\" fill=\"#8884d8\" />\n          <Bar dataKey=\"amt\" stackId=\"a\" fill=\"#82ca9d\" />\n          <Bar dataKey=\"uv\" fill=\"#ffc658\" />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst data = [\n  {\n    name: \"Page A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: \"Page B\",\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: \"Page C\",\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: \"Page D\",\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: \"Page E\",\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: \"Page F\",\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: \"Page G\",\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport default class Example extends PureComponent {\n  static demoUrl = \"https://codesandbox.io/s/stacked-bar-chart-s47i2\";\n\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"pv\" stackId=\"a\" fill=\"#8884d8\" />\n          <Bar dataKey=\"uv\" stackId=\"a\" fill=\"#82ca9d\" />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst data = [\n  { x: 100, y: 200, z: 200 },\n  { x: 120, y: 100, z: 260 },\n  { x: 170, y: 300, z: 400 },\n  { x: 140, y: 250, z: 280 },\n  { x: 150, y: 400, z: 500 },\n  { x: 110, y: 280, z: 200 },\n];\n\nexport default class Example extends PureComponent {\n  static demoUrl = \"https://codesandbox.io/s/simple-line-chart-kec3v\";\n\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <ScatterChart\n          width={400}\n          height={400}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"x\" name=\"stature\" unit=\"cm\" />\n          <YAxis type=\"number\" dataKey=\"y\" name=\"weight\" unit=\"kg\" />\n          <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n          <Scatter name=\"A school\" data={data} fill=\"#8884d8\" />\n        </ScatterChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React, { FC, ReactNode } from \"react\";\nimport styles from \"./WidgetCard.module.scss\";\nimport { CloseButton } from \"@chakra-ui/react\";\nimport SimpleLineChart from \"../widgets/SimpleLineChart\";\nimport StackedAreaChart from \"../widgets/StackedAreaChart\";\nimport MixedBarChart from \"../widgets/MixedBarChart\";\nimport StackedBarChart from \"../widgets/StackedBarChart\";\nimport SimpleScatterChart from \"../widgets/SimpleScatterChart\";\n\ninterface IWidgetCardProps {\n  deleteWidget: (i: string) => void;\n  i: string;\n  isEditorModeOn: boolean;\n}\n\ninterface IMap<T> {\n  [key: string]: T;\n}\nconst WidgetCard: FC<IWidgetCardProps> = ({\n  deleteWidget,\n  i,\n  isEditorModeOn,\n}) => {\n  const displayedWidget: IMap<ReactNode> = {\n    \"Simple Line Chart\": <SimpleLineChart />,\n    \"Stacked Area Chart\": <StackedAreaChart />,\n    \"Mixed Bar Chart\": <MixedBarChart />,\n    \"Stacked Bar Chart\": <StackedBarChart />,\n    \"Simple Scatter Chart\": <SimpleScatterChart />,\n  };\n  return (\n    <div\n      className={`${styles.WidgetCard} ${\n        isEditorModeOn && styles.WidgetCardInEditMode\n      }`}\n    >\n      <header\n        className={`${styles.header} && ${\n          !isEditorModeOn && styles.headerInReadOnlyMode\n        }`}\n      >\n        {isEditorModeOn && <div></div>}\n        <div className={styles.title}>{i}</div>\n        {isEditorModeOn && (\n          <CloseButton onClick={() => deleteWidget(i)} size=\"sm\" />\n        )}\n      </header>\n      <div className={styles.body}>{displayedWidget[i]}</div>\n    </div>\n  );\n};\n\nexport default WidgetCard;\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport { IWidgetPosition } from \"../../../types/common\";\nimport WidgetCard from \"../widgetCard/WidgetCard\";\nimport \"react-grid-layout/css/styles.css\";\n\nconst ReactGridLayout = WidthProvider(RGL);\n\ninterface IEditorProps {\n  layout: IWidgetPosition[];\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\n  deleteWidget: (i: string) => void;\n  isEditorModeOn: boolean;\n}\n\nconst WidgetGrid: FC<IEditorProps> = ({\n  layout,\n  setLayout,\n  deleteWidget,\n  isEditorModeOn,\n}) => {\n  return (\n    <ReactGridLayout\n      className=\"layout\"\n      layout={layout}\n      cols={6}\n      isDraggable={isEditorModeOn}\n      isResizable={isEditorModeOn}\n      onLayoutChange={(layout) => setLayout(layout)}\n    >\n      {layout.map((item) => (\n        <div key={item.i}>\n          <WidgetCard\n            data-grid={item}\n            deleteWidget={deleteWidget}\n            i={item.i}\n            isEditorModeOn={isEditorModeOn}\n          />\n        </div>\n      ))}\n    </ReactGridLayout>\n  );\n};\n\nexport default WidgetGrid;\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\nimport { IWidgetPosition } from \"../../types/common\";\nimport WidgetGrid from \"../../components/common/widgetGrid/WidgetGrid\";\nimport styles from \"./Editor.module.scss\";\n\ninterface IEditorProps {\n  layout: IWidgetPosition[];\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\n  deleteWidget: (i: string) => void;\n  isEditorModeOn: boolean;\n}\n\nconst Editor: FC<IEditorProps> = ({\n  layout,\n  setLayout,\n  deleteWidget,\n  isEditorModeOn,\n}) => {\n  let numberOfEmptyPanelsInGrid = 30;\n\n  /* Dashboard configuration interface should be represented by a 6 * X matrix where 6 is a fixed number of columns and X is a number of rows which increments \n  dynamically as more widgets are added to the dashboard. The minimal number of rows is 2 when a dashboard is empty, otherwise it is X + 1 additional empty row \n  when a dashboard is already populated with widgets (e.g. if 2 rows are occupied, display 3 with the 3rd being a completely empty row).\n  */\n  if (layout.length) {\n    const maxWidgetYPosition = Math.max(...layout.map((widgdet) => widgdet.y));\n    const maxHeightofHighestWidget = Math.max(\n      ...layout\n        .filter((widget) => widget.y === maxWidgetYPosition)\n        .map((widget) => widget.h)\n    );\n    numberOfEmptyPanelsInGrid =\n      (maxWidgetYPosition + maxHeightofHighestWidget + 1) * 6;\n  }\n  return (\n    <>\n      <div style={{ position: \"relative\" }}>\n        <div className={styles.emptyPanelsgrid}>\n          {Array.from({ length: numberOfEmptyPanelsInGrid }).map((_) => (\n            <div className={styles.emptyPanel}></div>\n          ))}\n        </div>\n      </div>\n      <div className={styles.widgetLayout}>\n        <WidgetGrid {...{ layout, setLayout, deleteWidget, isEditorModeOn }} />\n      </div>\n    </>\n  );\n};\n\nexport default Editor;\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\nimport { IWidgetPosition } from \"../../types/common\";\nimport WidgetGrid from \"../../components/common/widgetGrid/WidgetGrid\";\n\ninterface IDashboardProps {\n  layout: IWidgetPosition[];\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\n  deleteWidget: (i: string) => void;\n  isEditorModeOn: boolean;\n}\n\nconst Dashboard: FC<IDashboardProps> = ({\n  layout,\n  setLayout,\n  deleteWidget,\n  isEditorModeOn,\n}) => {\n  return (\n    <WidgetGrid\n      {...{ layout, setLayout, deleteWidget }}\n      isEditorModeOn={isEditorModeOn}\n    />\n  );\n};\n\nexport default Dashboard;\n","import React, { FC, ChangeEvent, Dispatch, SetStateAction } from \"react\";\nimport { Switch } from \"@chakra-ui/switch\";\nimport {\n  FormControl,\n  FormLabel,\n  IconButton,\n  MenuButton,\n  Menu,\n  MenuList,\n  MenuItem,\n} from \"@chakra-ui/react\";\nimport styles from \"./AppHeader.module.scss\";\nimport { IWidgetPosition } from \"../../../types/common\";\nimport { AddIcon } from \"@chakra-ui/icons\";\n// import { ColorModeSwitcher } from \"../../../ColorModeSwitcher\";\n\ninterface IAppHeaderProps {\n  isEditorModeOn: boolean;\n  setIsEditorModeOn: Dispatch<SetStateAction<boolean>>;\n  addWidget: (i: string) => void;\n  layout: IWidgetPosition[];\n}\nconst AppHeader: FC<IAppHeaderProps> = ({\n  isEditorModeOn,\n  layout,\n  setIsEditorModeOn,\n  addWidget,\n}) => {\n  const allWidgetOptions = [\n    \"Simple Line Chart\",\n    \"Stacked Area Chart\",\n    \"Mixed Bar Chart\",\n    \"Stacked Bar Chart\",\n    \"Simple Scatter Chart\",\n  ];\n\n  const availableWidgetOptions = allWidgetOptions.filter(\n    (option) => !layout.some((widget) => widget.i === option)\n  );\n  return (\n    <header className={styles.header}>\n      <nav className={styles.nav}>\n        <FormControl display=\"flex\" alignItems=\"center\">\n          <FormLabel htmlFor=\"editor-mode\" mb=\"0\">\n            Editor Mode\n          </FormLabel>\n          <Switch\n            id=\"editor-mode\"\n            isChecked={isEditorModeOn}\n            onChange={(e: ChangeEvent<HTMLInputElement>): void =>\n              setIsEditorModeOn(e.target.checked)\n            }\n            className={styles.editorModeSwitch}\n          />\n        </FormControl>\n        {isEditorModeOn && (\n          <Menu>\n            <MenuButton\n              as={IconButton}\n              aria-label=\"add-widget-options\"\n              icon={<AddIcon />}\n              variant=\"outline\"\n            />\n            <MenuList>\n              {availableWidgetOptions.length ? (\n                availableWidgetOptions\n                  .filter(\n                    (option) => !layout.some((widget) => widget.i === option)\n                  )\n                  .map((option) => (\n                    <MenuItem onClick={() => addWidget(option)}>\n                      {option}\n                    </MenuItem>\n                  ))\n              ) : (\n                <MenuItem className={styles.noMoreOptions}>\n                  No options available.\n                </MenuItem>\n              )}\n            </MenuList>\n          </Menu>\n        )}\n      </nav>\n      {/* <ColorModeSwitcher /> */}\n    </header>\n  );\n};\n\nexport default AppHeader;\n","import { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport React, { FC, useState } from \"react\";\nimport Editor from \"./pages/editor/Editor\";\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport styles from \"./App.module.scss\";\nimport { NUMBER_OF_COLUMNS } from \"../src/utils/constants\";\nimport { IWidgetPosition } from \"../src/types/common\";\nimport AppHeader from \"./components/common/appHeader/AppHeader\";\nimport \"./App.scss\";\n/**\n * TODO:\n * 1. Make placeholder app page. (DONE)\n * 2. Make placeholder editor page. (DONE)\n * 3. Make placeholder read page. (DONE)\n * 4. Put placeholder editor and read pages in app page. (DONE)\n * 5. Build switch in top-left corner to toggle between editor and read pages. (DONE)\n * 6. Switch to editor mode. (DONE)\n * 7. Make placeholder for widget component (DONE)\n * 8. Create add widget button with dropdown that allows you to toggle between chart types. (DONE)\n * 9. Create draggable/resizable grid with https://www.npmjs.com/package/react-grid-layout. (DONE)\n * 10. Make responsive and performant. (DONE)\n * 11. Create empty widget panel. (DONE)\n * 12. Make it 2 x 2 squares by default. (DONE)\n * 13. Make responsive and performant. (DONE)\n * 14. Make resizable/draggable (and make sure mouse icon corresponds to resize/drag region and hover turns border green). (DONE)\n * 15. Make the widget panel display the mock simple bar chart. (DONE)\n * 16. Mock multiples of this widget panel, make sure everything works. (DONE)\n * 17. Make responsive and performant. (DONE)\n * 18. Add a delete option which deletes the widget. (DONE)\n * 19. Make sure still responsive and performant. (DONE)\n * 20. Try and create a base of 6 * X matrix where 6 is a fixed\n *     number of columns and X is a number of rows which increments dynamically as more widgets are added to the board. Min 2 rows when dashboard is empty\n *     , otherwise it is X + 1 (e.g. 3 rows when 2 are populated with widgets where 3rd row is empty). (DONE)\n * 21. Try and create the background of empty panel tiles within react-grid-layout component. If can't do, create a fixed component for this and position it underneath the\n *     react-grid-layout component to look like a background. (DONE)\n * 21. Dashboards should not have empty rows. When widgets are deleted from the dashboard and empty rows are created – widgets below empty rows should shift to the top and fill up those empty rows. (DONE)\n * 22. Make dashboard empty on app mount. (DONE)\n * 23. Make 'add widget' button actually add the corresponding widget panel to the dashboard. (DONE)\n * 24. Make sure the added widget type is automatically removed from the 'add widget' button's dropdown options. (DONE)\n * 25. Add 4/5 more chart types with corresponding mock data. (DONE)\n */\n\nexport const App: FC = () => {\n  const [isEditorModeOn, setIsEditorModeOn] = useState(true);\n  const [layout, setLayout] = useState<IWidgetPosition[]>([]);\n\n  /**\n   * @description Add a new widget add the end of the current widget layout.\n   * @param i index/identifer of widget\n   */\n  const addWidget = (i: string): void => {\n    if (layout.length) {\n      const lastWidgetPosition = layout[layout.length - 1];\n      return setLayout(\n        (currentLayout: IWidgetPosition[]): IWidgetPosition[] => [\n          ...currentLayout,\n          {\n            i,\n            x:\n              lastWidgetPosition.x >= NUMBER_OF_COLUMNS - 2\n                ? 0\n                : lastWidgetPosition.x + 2,\n            y:\n              lastWidgetPosition.x >= NUMBER_OF_COLUMNS - 2\n                ? lastWidgetPosition.y + 2\n                : lastWidgetPosition.y,\n            w: 2,\n            h: 2,\n          },\n        ]\n      );\n    }\n    setLayout([{ i, x: 0, y: 0, w: 2, h: 2 }]);\n  };\n\n  /**\n   * @description Delete widget.\n   * @param i index/identifer of widget\n   */\n  const deleteWidget = (i: string): void =>\n    setLayout((currentLayout) =>\n      currentLayout.filter((widget) => widget.i !== i)\n    );\n\n  return (\n    <ChakraProvider theme={theme}>\n      <div className={styles.App}>\n        <AppHeader\n          {...{ isEditorModeOn, layout, setIsEditorModeOn, addWidget }}\n        />\n        <body className={styles.body}>\n          {isEditorModeOn ? (\n            <Editor\n              layout={layout}\n              setLayout={setLayout}\n              deleteWidget={deleteWidget}\n              isEditorModeOn={isEditorModeOn}\n            />\n          ) : (\n            <Dashboard\n              layout={layout}\n              setLayout={setLayout}\n              deleteWidget={deleteWidget}\n              isEditorModeOn={isEditorModeOn}\n            />\n          )}\n        </body>\n      </div>\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WidgetCard\":\"WidgetCard_WidgetCard__2_jT9\",\"header\":\"WidgetCard_header__38HhZ\",\"headerInReadOnlyMode\":\"WidgetCard_headerInReadOnlyMode__2u288\",\"body\":\"WidgetCard_body__3xesA\",\"title\":\"WidgetCard_title__26vOV\",\"WidgetCardInEditMode\":\"WidgetCard_WidgetCardInEditMode__iunP6\"};"],"sourceRoot":""}